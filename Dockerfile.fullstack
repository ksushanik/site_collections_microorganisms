# Multi-stage Dockerfile –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –°–ò–§–ò–ë–† –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Backend + Frontend)
# Stage 1: Build React Frontend
FROM node:20-alpine AS frontend-build

WORKDIR /app/frontend

# –ö–æ–ø–∏—Ä—É–µ–º package files
COPY frontend/package*.json ./
RUN npm ci

# –ö–æ–ø–∏—Ä—É–µ–º frontend –∫–æ–¥ –∏ —Å–æ–±–∏—Ä–∞–µ–º
COPY frontend/ ./
RUN npm run build

# Stage 2: Build Django Backend
FROM python:3.11-slim AS backend

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
LABEL maintainer="SIFIBR SB RAS <sifibr@sifibr.irk.ru>"
LABEL description="SIFIBR Microorganisms Collections - Full Stack"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ + nginx
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        gettext \
        postgresql-client \
        libpq-dev \
        curl \
        nginx \
    && rm -rf /var/lib/apt/lists/*

# –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º requirements –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt .
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º Django –∫–æ–¥
COPY . .

# –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ stage
COPY --from=frontend-build /app/frontend/dist /app/frontend/dist

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
RUN mkdir -p /app/staticfiles /app/media

# –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã Django
RUN python manage.py collectstatic --noinput --clear

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º nginx –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏ –∏ —Ñ—Ä–æ–Ω—Ç–∞
RUN echo 'server {\n\
    listen 80;\n\
    server_name _;\n\
    \n\
    # React frontend\n\
    location / {\n\
        root /app/frontend/dist;\n\
        try_files $uri $uri/ /index.html;\n\
    }\n\
    \n\
    # Django API\n\
    location /api/ {\n\
        proxy_pass http://127.0.0.1:8000;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
    \n\
    # Django admin\n\
    location /admin/ {\n\
        proxy_pass http://127.0.0.1:8000;\n\
        proxy_set_header Host $host;\n\
        proxy_set_header X-Real-IP $remote_addr;\n\
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
        proxy_set_header X-Forwarded-Proto $scheme;\n\
    }\n\
    \n\
    # Django static files\n\
    location /static/ {\n\
        alias /app/staticfiles/;\n\
    }\n\
    \n\
    # Media files\n\
    location /media/ {\n\
        alias /app/media/;\n\
    }\n\
}\n' > /etc/nginx/sites-available/default

# –°–æ–∑–¥–∞–µ–º entrypoint —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ nginx + Django
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "üöÄ Starting SIFIBR Full Stack on Render..."\n\
\n\
# –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL\n\
if [ -z "$DATABASE_URL" ]; then\n\
    echo "‚ùå ERROR: DATABASE_URL not set!"\n\
    echo "Please configure DATABASE_URL in Render environment variables"\n\
    exit 1\n\
fi\n\
\n\
echo "‚úÖ DATABASE_URL configured"\n\
\n\
# –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏\n\
echo "üìÑ Running migrations..."\n\
python manage.py migrate --noinput\n\
\n\
# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n\
echo "üìä Creating test data..."\n\
python manage.py create_test_data || echo "Test data already exists"\n\
\n\
# –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\
echo "üë§ Creating superuser..."\n\
python manage.py shell -c "\
from django.contrib.auth.models import User;\
User.objects.filter(username=\"admin\").exists() or \
User.objects.create_superuser(\"admin\", \"admin@sifibr.irk.ru\", \"sifibr_admin_2025\")\
" || echo "Admin user already exists"\n\
\n\
echo "‚úÖ Setup complete!"\n\
\n\
# –ó–∞–ø—É—Å–∫–∞–µ–º nginx\n\
echo "üåê Starting nginx..."\n\
nginx\n\
\n\
echo "üêç Starting Django on port 8000..."\n\
# –ó–∞–ø—É—Å–∫–∞–µ–º Django –≤ —Ñ–æ–Ω–µ\n\
exec gunicorn sifibr_collections.wsgi:application \\\n\
    --bind 127.0.0.1:8000 \\\n\
    --workers 4 \\\n\
    --worker-class sync \\\n\
    --timeout 120 \\\n\
    --keep-alive 2 \\\n\
    --access-logfile - \\\n\
    --error-logfile - &\n\
\n\
# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Django\n\
sleep 3\n\
\n\
echo "‚úÖ Full stack ready! Frontend + Backend running"\n\
\n\
# –î–µ—Ä–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º\n\
wait\n\
' > /entrypoint.sh \
    && chmod +x /entrypoint.sh

# Health check —á–µ—Ä–µ–∑ nginx
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:80/api/health/ || exit 1

# Expose –ø–æ—Ä—Ç nginx
EXPOSE 80

ENTRYPOINT ["/entrypoint.sh"] 