# Generated by Django 4.2.8 on 2025-05-29 04:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название коллекции')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='Код коллекции')),
                ('collection_type', models.CharField(choices=[('autotrophic', 'Автотрофные микроорганизмы'), ('nitrogen_fixing', 'Азотфиксирующие микроорганизмы'), ('bioactive', 'Продуценты биологически активных веществ'), ('antibiotic', 'Продуценты антибиотиков'), ('extremophiles', 'Экстремофильные микроорганизмы'), ('baikal_endemic', 'Эндемики озера Байкал'), ('psychrophiles', 'Психрофильные микроорганизмы'), ('deep_water', 'Глубоководные формы'), ('symbiotic', 'Симбиотические микроорганизмы'), ('marine', 'Морские микроорганизмы'), ('freshwater', 'Пресноводные микроорганизмы'), ('soil', 'Почвенные микроорганизмы'), ('industrial', 'Промышленные штаммы'), ('medical', 'Медицинские штаммы'), ('agricultural', 'Сельскохозяйственные штаммы'), ('environmental', 'Экологические штаммы'), ('other', 'Прочие')], max_length=50, verbose_name='Тип коллекции')),
                ('description', models.TextField(verbose_name='Описание коллекции')),
                ('established_date', models.DateField(verbose_name='Дата создания коллекции')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активная коллекция')),
                ('access_level', models.CharField(choices=[('public', 'Публичная'), ('restricted', 'Ограниченная'), ('private', 'Частная')], default='public', max_length=20, verbose_name='Уровень доступа')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('curator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Куратор')),
            ],
            options={
                'verbose_name': 'Коллекция',
                'verbose_name_plural': 'Коллекции',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('strain_number', models.CharField(help_text='Уникальный номер в коллекции', max_length=50, verbose_name='Номер штамма')),
                ('alternative_numbers', models.TextField(blank=True, help_text='Другие номера штамма через запятую', verbose_name='Альтернативные номера')),
                ('scientific_name', models.CharField(max_length=200, verbose_name='Научное название')),
                ('genus', models.CharField(max_length=100, verbose_name='Род')),
                ('species', models.CharField(max_length=100, verbose_name='Вид')),
                ('subspecies', models.CharField(blank=True, max_length=100, verbose_name='Подвид')),
                ('organism_type', models.CharField(choices=[('bacteria', 'Бактерии'), ('archaea', 'Археи'), ('fungi', 'Грибы'), ('yeast', 'Дрожжи'), ('algae', 'Водоросли'), ('protozoa', 'Простейшие'), ('virus', 'Вирусы'), ('other', 'Прочие')], max_length=20, verbose_name='Тип организма')),
                ('isolation_source', models.CharField(max_length=200, verbose_name='Источник выделения')),
                ('habitat_type', models.CharField(choices=[('baikal_surface', 'Поверхность Байкала'), ('baikal_deep', 'Глубины Байкала (>200м)'), ('baikal_bottom', 'Дно Байкала'), ('baikal_coastal', 'Прибрежная зона Байкала'), ('hot_springs', 'Горячие источники'), ('permafrost', 'Вечная мерзлота'), ('soil', 'Почва'), ('sediment', 'Донные отложения'), ('ice', 'Лед'), ('snow', 'Снег'), ('air', 'Воздух'), ('plant', 'Растения'), ('animal', 'Животные'), ('industrial', 'Промышленные объекты'), ('other', 'Прочие')], max_length=50, verbose_name='Тип среды обитания')),
                ('geographic_location', models.CharField(max_length=200, verbose_name='Географическое местоположение')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Широта')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Долгота')),
                ('depth_meters', models.PositiveIntegerField(blank=True, null=True, verbose_name='Глубина отбора (м)')),
                ('optimal_temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Оптимальная температура (°C)')),
                ('temperature_range_min', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Мин. температура (°C)')),
                ('temperature_range_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Макс. температура (°C)')),
                ('optimal_ph', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)], verbose_name='Оптимальный pH')),
                ('ph_range_min', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)], verbose_name='Мин. pH')),
                ('ph_range_max', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)], verbose_name='Макс. pH')),
                ('is_psychrophile', models.BooleanField(default=False, verbose_name='Психрофил')),
                ('is_thermophile', models.BooleanField(default=False, verbose_name='Термофил')),
                ('is_halophile', models.BooleanField(default=False, verbose_name='Галофил')),
                ('is_acidophile', models.BooleanField(default=False, verbose_name='Ацидофил')),
                ('is_alkaliphile', models.BooleanField(default=False, verbose_name='Алкалифил')),
                ('is_barophile', models.BooleanField(default=False, verbose_name='Барофил')),
                ('produces_antibiotics', models.BooleanField(default=False, verbose_name='Продуцирует антибиотики')),
                ('produces_enzymes', models.BooleanField(default=False, verbose_name='Продуцирует ферменты')),
                ('produces_metabolites', models.BooleanField(default=False, verbose_name='Продуцирует метаболиты')),
                ('nitrogen_fixation', models.BooleanField(default=False, verbose_name='Азотфиксация')),
                ('genome_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Размер генома (bp)')),
                ('gc_content', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='GC-состав (%)')),
                ('has_genome_sequence', models.BooleanField(default=False, verbose_name='Геном секвенирован')),
                ('isolation_date', models.DateField(blank=True, null=True, verbose_name='Дата выделения')),
                ('deposit_date', models.DateField(verbose_name='Дата депонирования')),
                ('is_available', models.BooleanField(default=True, verbose_name='Доступен для заказа')),
                ('is_type_strain', models.BooleanField(default=False, verbose_name='Типовой штамм')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('special_properties', models.TextField(blank=True, verbose_name='Особые свойства')),
                ('cultivation_notes', models.TextField(blank=True, verbose_name='Особенности культивирования')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strains', to='catalog.collection', verbose_name='Коллекция')),
            ],
            options={
                'verbose_name': 'Штамм',
                'verbose_name_plural': 'Штаммы',
                'ordering': ['collection', 'strain_number'],
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
                ('authors', models.TextField(verbose_name='Авторы')),
                ('journal', models.CharField(max_length=200, verbose_name='Журнал')),
                ('volume', models.CharField(blank=True, max_length=20, verbose_name='Том')),
                ('issue', models.CharField(blank=True, max_length=20, verbose_name='Выпуск')),
                ('pages', models.CharField(blank=True, max_length=50, verbose_name='Страницы')),
                ('year', models.PositiveIntegerField(verbose_name='Год публикации')),
                ('doi', models.CharField(blank=True, max_length=100, verbose_name='DOI')),
                ('pmid', models.CharField(blank=True, max_length=20, verbose_name='PubMed ID')),
                ('url', models.URLField(blank=True, verbose_name='URL')),
                ('abstract', models.TextField(blank=True, verbose_name='Аннотация')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('strains', models.ManyToManyField(related_name='publications', to='catalog.strain', verbose_name='Штаммы')),
            ],
            options={
                'verbose_name': 'Публикация',
                'verbose_name_plural': 'Публикации',
                'ordering': ['-year', 'title'],
            },
        ),
        migrations.CreateModel(
            name='GenomeSequence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sequence_type', models.CharField(choices=[('complete', 'Полный геном'), ('draft', 'Черновой геном'), ('contig', 'Контиг'), ('scaffold', 'Скаффолд'), ('plasmid', 'Плазмида'), ('16s_rrna', '16S рРНК'), ('its', 'ITS'), ('other', 'Прочее')], max_length=20, verbose_name='Тип последовательности')),
                ('accession_number', models.CharField(max_length=50, unique=True, verbose_name='Номер доступа')),
                ('database', models.CharField(default='NCBI', max_length=50, verbose_name='База данных')),
                ('sequence_length', models.PositiveIntegerField(verbose_name='Длина последовательности')),
                ('sequence_data', models.TextField(blank=True, verbose_name='Данные последовательности')),
                ('submission_date', models.DateField(verbose_name='Дата депонирования')),
                ('quality_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Показатель качества')),
                ('coverage', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Покрытие')),
                ('notes', models.TextField(blank=True, verbose_name='Примечания')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('strain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genome_sequences', to='catalog.strain', verbose_name='Штамм')),
            ],
            options={
                'verbose_name': 'Геномная последовательность',
                'verbose_name_plural': 'Геномные последовательности',
                'ordering': ['-submission_date'],
            },
        ),
        migrations.AddIndex(
            model_name='strain',
            index=models.Index(fields=['scientific_name'], name='catalog_str_scienti_7424bb_idx'),
        ),
        migrations.AddIndex(
            model_name='strain',
            index=models.Index(fields=['genus', 'species'], name='catalog_str_genus_ffe7ab_idx'),
        ),
        migrations.AddIndex(
            model_name='strain',
            index=models.Index(fields=['habitat_type'], name='catalog_str_habitat_c0ce1c_idx'),
        ),
        migrations.AddIndex(
            model_name='strain',
            index=models.Index(fields=['is_psychrophile'], name='catalog_str_is_psyc_4f1b08_idx'),
        ),
        migrations.AddIndex(
            model_name='strain',
            index=models.Index(fields=['latitude', 'longitude'], name='catalog_str_latitud_6f7898_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='strain',
            unique_together={('collection', 'strain_number')},
        ),
    ]
